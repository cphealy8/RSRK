g <- g + geom_line(data=kdat,aes(r,L),col="red",size = lnwd)
g <- g + coord_cartesian(xlim = c(0, kdat$r[cutind]))
g <- g + ggtitle(paste(figname,channame,regname,"Univariate K"))
print(g)
ggsave(plotfname,g,device="pdf",width=3,height=3,units="in")
# Plot pcf
g <- NULL
g <- ggplot(data=kdat,aes(r,obsPCF))
g <- g + theme_bw(base_size=12)
g <- g + geom_ribbon(data=kdat,aes(x=r,ymin=PCFSLo,ymax=PCFSHi),alpha=envAlpha)
g <- g + geom_ribbon(data=kdat,aes(x=r,ymin=PCFSSLo,ymax=PCFSSHi),alpha=envAlpha)
g <- g + geom_ribbon(data=kdat,aes(x=r,ymin=PCFSSSLo,ymax=PCFSSSHi),alpha=envAlpha)
g <- g + geom_line(data=kdat,aes(r,theoPCF),size = lnwd)
g <- g + geom_line(data=kdat,aes(r,obsPCF),col="red",size = lnwd/2)
g <- g + coord_cartesian(xlim = c(0, kdat$r[cutind]))
g <- g + ggtitle(paste(figname,channame,regname,"Univariate PCF"))
print(g)
ggsave(plotfname2,g,device="pdf",width=3,height=3,units="in")
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/CellSystemsPaper/code/KAnalysisFull.R', echo=TRUE)
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/CellSystemsPaper/code/KAnalysisFull.R', echo=TRUE)
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/CellSystemsPaper/code/KUnivAnalysisFull.R', echo=TRUE)
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/CellSystemsPaper/code/Dependencies/KBivAnalysisFull.R', echo=TRUE)
rm(list=ls())
library(spatstat)
library(ggplot2)
library(reshape2)
source("Dependencies/KUnivAnalysisFull.R")
source("Dependencies/KBivAnalysisFull.R")
## Filenaming
figname <- "6D"
regnames <- c("D3","PE")
imtype  <- "MIP"
channames <- c("CXCL12","LepR")
for (nk in 1:length(channames)){
channameA <- channames[nk]
KUnivAnalysisFull(figname,regnames,imtype,channameA)
for (nj in 1:length(channames)){
channameB <- channames[nj]
if(channameA!=channameB){
KBivAnalysisFull(figname,regnames,imtype,channameA,channameB)
}
}
}
rm(list=ls())
library(spatstat)
library(ggplot2)
library(reshape2)
source("Dependencies/KUnivAnalysisFull.R")
source("Dependencies/KBivAnalysisFull.R")
## Filenaming
figname <- "6D"
regnames <- c("D3","PE")
imtype  <- "MIP"
channames <- c("CXCL12","LepR")
for (nk in 1:length(channames)){
channameA <- channames[nk]
KUnivAnalysisFull(figname,regnames,imtype,channameA)
for (nj in 1:length(channames)){
channameB <- channames[nj]
if(channameA!=channameB){
KBivAnalysisFull(figname,regnames,imtype,channameA,channameB)
}
}
}
rm(list=ls())
library(spatstat)
library(ggplot2)
library(reshape2)
source("Dependencies/KUnivAnalysisFull.R")
source("Dependencies/KBivAnalysisFull.R")
## Filenaming
figname <- "6D"
regnames <- c("D3","PE")
imtype  <- "MIP"
channames <- c("CXCL12","LepR")
for (nk in 1:length(channames)){
channameA <- channames[nk]
KUnivAnalysisFull(figname,regnames,imtype,channameA)
for (nj in 1:length(channames)){
channameB <- channames[nj]
if(channameA!=channameB){
KBivAnalysisFull(figname,regnames,imtype,channameA,channameB)
}
}
}
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/CellSystemsPaper/code/KAnalysisFull.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
?prcomp
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
install.packages("devtools")
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
source('~/PCA_MTCarsExample.R', echo=TRUE)
mtcars.country <- c(rep("Japan", 3), rep("US",4), rep("Europe", 7),rep("US",3)
,"Europe", rep("Japan", 3), rep("US",4), rep("Europe", 3)
, "US", rep("Europe", 3))
ggbiplot(mtcars.pca,ellipse=TRUE,labels=rownames(mtcars),groupts=mtcars.country)
source('~/PCA_MTCarsExample.R', echo=TRUE)
mtcars
a <-mtcars
?ggsave
??ggsave
source('C:/Users/PC/Box Sync/Research/Projects/Blood Cell Classification/PCA/PCA_LSK_LineageNegativeCells.R', echo=TRUE)
# Load Data and source files
load("../Data/LSK/LSK_All.RData")
source("evplot.R")
library(rgl)
# Set which dataset is going to be used.
FeatureData <- LSK_Features
FeatureLabels <- LSK_Labels
# FeatureData <- `LSK+TPOFeatures`
# FeatureLabels <- `LSK_TPO_Labels`
# Omit things if necessary
source("OmitNucleusData.R")
source("OmitSignalData.R")
source("OmitComparisonData.R")
# source("OmitTextureData.R")
# source("OmitShapeData.R")
# Assign categorical variables to each sample.
nEx <- nrow(FeatureData)
LinNeg <- factor(rep(FALSE,nEx),levels=c(TRUE,FALSE))
LinNegInds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$LinNeg))
LinNeg[LinNegInds] <- 'TRUE'
Region <- factor(rep('Lin+',nEx),levels=c('Lin+','R1','R2','R3','R4'))
R1Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R1))
R2Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R2))
R3Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R3))
R4Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R4))
Region[R1Inds] <- 'R1'
Region[R2Inds] <- 'R2'
Region[R3Inds] <- 'R3'
Region[R4Inds] <- 'R4'
FeatureData$Region <- Region
########################################
# Subset the dataset to look at only lineage negative cells
FeatureData <- subset(FeatureData,Region!='Lin+')
Region <- FeatureData$Region
FeatureData$Region <- NULL # We need to omit this before PCA
########################################
# Perform PCA on the dataset.
data.pca <- prcomp(FeatureData,center = TRUE,scale. = TRUE) # This is the actual PCA
summary(data.pca) # This displays the results of the PCA
# Some useful transformations of the Data
loadings <- data.pca$rotation
scores <- data.pca$x
correlations <- t(loadings)*data.pca$sdev
# Reappend Regions to the dataframe
FeatureData$Region <- Region
### EV Plot
ev <- data.pca$sdev^2
evplot(ev)
### PC VS. VARIANCE PLOT (SCREE PLOT) ###
plot(data.pca,type="l",main="")
### BIPLOT ###
GroupCols <- c("#fc8d62","#8da0cb","#e78ac3","#a6d854")
library(ggbiplot)
g1 <- ggbiplot(data.pca,choices=c(1,2),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g1)
g2 <- ggbiplot(data.pca,choices=c(1,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g2)
g3 <- ggbiplot(data.pca,choices=c(2,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g3)
## New plot
pdat <- as.data.frame(data.pca$x)
pdat$Region <- Region
g <- ggplot(pdat,aes(x=PC1,y=PC2,color=Region,shape=Region))+geom_point()
print(g)
source('C:/Users/PC/Box Sync/Research/Projects/Blood Cell Classification/PCA/PCA_MTCarsExample.R', echo=TRUE)
# Load Data and source files
load("../Data/LSK/LSK_All.RData")
source("evplot.R")
library(rgl)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
# Set which dataset is going to be used.
FeatureData <- LSK_Features
FeatureLabels <- LSK_Labels
# FeatureData <- `LSK+TPOFeatures`
# FeatureLabels <- `LSK_TPO_Labels`
# Omit things if necessary
source("OmitNucleusData.R")
source("OmitSignalData.R")
source("OmitComparisonData.R")
# source("OmitTextureData.R")
# source("OmitShapeData.R")
# Assign categorical variables to each sample.
nEx <- nrow(FeatureData)
LinNeg <- factor(rep(FALSE,nEx),levels=c(TRUE,FALSE))
LinNegInds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$LinNeg))
LinNeg[LinNegInds] <- 'TRUE'
Region <- factor(rep('Lin+',nEx),levels=c('Lin+','R1','R2','R3','R4'))
R1Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R1))
R2Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R2))
R3Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R3))
R4Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R4))
Region[R1Inds] <- 'R1'
Region[R2Inds] <- 'R2'
Region[R3Inds] <- 'R3'
Region[R4Inds] <- 'R4'
FeatureData$Region <- Region
########################################
# Subset the dataset to look at only lineage negative cells
FeatureData <- subset(FeatureData,Region!='Lin+')
Region <- FeatureData$Region
FeatureData$Region <- NULL # We need to omit this before PCA
########################################
# Perform PCA on the dataset.
data.pca <- prcomp(FeatureData,center = TRUE,scale. = TRUE) # This is the actual PCA
summary(data.pca) # This displays the results of the PCA
# Some useful transformations of the Data
loadings <- data.pca$rotation
scores <- data.pca$x
correlations <- t(loadings)*data.pca$sdev
# Reappend Regions to the dataframe
FeatureData$Region <- Region
### EV Plot
ev <- data.pca$sdev^2
evplot(ev)
### PC VS. VARIANCE PLOT (SCREE PLOT) ###
plot(data.pca,type="l",main="")
### BIPLOT ###
GroupCols <- c("#fc8d62","#8da0cb","#e78ac3","#a6d854")
library(ggbiplot)
g1 <- ggbiplot(data.pca,choices=c(1,2),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g1)
g2 <- ggbiplot(data.pca,choices=c(1,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g2)
g3 <- ggbiplot(data.pca,choices=c(2,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
scale_color_manual(values = GroupCols)
print(g3)
## New plot
pdat <- as.data.frame(data.pca$x)
pdat$Region <- Region
g <- ggplot(pdat,aes(x=PC1,y=PC2,color=Region,shape=Region))+geom_point()
print(g)
# Load Data and source files
load("../Data/LSK/LSK_All.RData")
source("evplot.R")
library(rgl)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
# Set which dataset is going to be used.
FeatureData <- LSK_Features
FeatureLabels <- LSK_Labels
# FeatureData <- `LSK+TPOFeatures`
# FeatureLabels <- `LSK_TPO_Labels`
# Omit things if necessary
source("OmitNucleusData.R")
source("OmitSignalData.R")
source("OmitComparisonData.R")
# source("OmitTextureData.R")
# source("OmitShapeData.R")
# Assign categorical variables to each sample.
nEx <- nrow(FeatureData)
LinNeg <- factor(rep(FALSE,nEx),levels=c(TRUE,FALSE))
LinNegInds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$LinNeg))
LinNeg[LinNegInds] <- 'TRUE'
Region <- factor(rep('Lin+',nEx),levels=c('Lin+','R1','R2','R3','R4'))
# Load Data and source files
load("../Data/LSK/LSK_All.RData")
source("evplot.R")
library(rgl)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
# Set which dataset is going to be used.
FeatureData <- LSK_Features
FeatureLabels <- LSK_Labels
# Load Data and source files
load("../Data/LSK/LSK_All.RData")
source("evplot.R")
library(rgl)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
# Set which dataset is going to be used.
FeatureData <- LSK_Features
FeatureLabels <- LSK_Labels
# FeatureData <- `LSK+TPOFeatures`
# FeatureLabels <- `LSK_TPO_Labels`
# Omit things if necessary
source("OmitNucleusData.R")
source("OmitSignalData.R")
source("OmitComparisonData.R")
# source("OmitTextureData.R")
# source("OmitShapeData.R")
# Assign categorical variables to each sample.
nEx <- nrow(FeatureData)
LinNeg <- factor(rep(FALSE,nEx),levels=c(TRUE,FALSE))
LinNegInds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$LinNeg))
LinNeg[LinNegInds] <- 'TRUE'
Region <- factor(rep('Lin+',nEx),levels=c('Lin+','R1','R2','R3','R4'))
R1Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R1))
R2Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R2))
R3Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R3))
R4Inds <- is.element(rownames(FeatureData),na.omit(FeatureLabels$R4))
Region[R1Inds] <- 'R1'
Region[R2Inds] <- 'R2'
Region[R3Inds] <- 'R3'
Region[R4Inds] <- 'R4'
FeatureData$Region <- Region
########################################
# Subset the dataset to look at only lineage negative cells
FeatureData <- subset(FeatureData,Region!='Lin+')
Region <- FeatureData$Region
FeatureData$Region <- NULL # We need to omit this before PCA
########################################
# Perform PCA on the dataset.
data.pca <- prcomp(FeatureData,center = TRUE,scale. = TRUE) # This is the actual PCA
summary(data.pca) # This displays the results of the PCA
# Some useful transformations of the Data
loadings <- data.pca$rotation
scores <- data.pca$x
correlations <- t(loadings)*data.pca$sdev
# Reappend Regions to the dataframe
FeatureData$Region <- Region
### EV Plot
ev <- data.pca$sdev^2
evplot(ev)
### PC VS. VARIANCE PLOT (SCREE PLOT) ###
plot(data.pca,type="l",main="")
### BIPLOT ###
# GroupCols <- c("#fc8d62","#8da0cb","#e78ac3","#a6d854")
# library(ggbiplot)
# g1 <- ggbiplot(data.pca,choices=c(1,2),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
#   scale_color_manual(values = GroupCols)
# print(g1)
#
# g2 <- ggbiplot(data.pca,choices=c(1,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
#   scale_color_manual(values = GroupCols)
# print(g2)
#
# g3 <- ggbiplot(data.pca,choices=c(2,3),ellipse = TRUE, groups=FeatureData$Region, obs.scale=1,var.scale=1,var.axes=FALSE,alpha=0.2)+
#   scale_color_manual(values = GroupCols)
# print(g3)
## New plot
pdat <- as.data.frame(data.pca$x)
pdat$Region <- Region
g1 <- ggplot(pdat,aes(x=PC1,y=PC2,color=Region,shape=Region))+
geom_point(alpha=0.2,size=1)+
stat_ellipse(level=0.99,size=1,color="white")+
stat_ellipse(level=0.99,size=0.5)+
scale_color_brewer(palette = "Spectral")+
coord_fixed(ratio=1)+
theme_bw()+
theme(text = element_text(size=8),legend.position="none")
# stat_density_2d(bins=2)
# geom_point(alpha=0.2)
print(g1)
ggsave('LSK_PCA_1v2.pdf',width=3,height=3,scale=1)
g2 <- ggplot(pdat,aes(x=PC1,y=PC3,color=Region,shape=Region))+
geom_point(alpha=0.2,size=1)+
stat_ellipse(level=0.99,size=1,color="white")+
stat_ellipse(level=0.99,size=0.5)+
scale_color_brewer(palette = "Spectral")+
coord_fixed(ratio=1)+
theme_bw()+
theme(text = element_text(size=8),legend.position="none")
# stat_density_2d(bins=2)
# geom_point(alpha=0.2)
print(g2)
ggsave('LSK_PCA_1v3.pdf',width=3,height=3,scale=1)
g3 <- ggplot(pdat,aes(x=PC2,y=PC3,color=Region,shape=Region))+
geom_point(alpha=0.2,size=1)+
stat_ellipse(level=0.99,size=1,color="white")+
stat_ellipse(level=0.99,size=0.5)+
scale_color_brewer(palette = "Spectral")+
coord_fixed(ratio=1)+
theme_bw()+
theme(text = element_text(size=8),legend.position="none")
# stat_density_2d(bins=2)
# geom_point(alpha=0.2)
print(g3)
ggsave('LSK_PCA_2v3.pdf',width=3,height=3,scale=1)
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/code/RKPlots.R', echo=TRUE)
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/code/VisExamplePlots.R', echo=TRUE)
install.packages("spatstat")
rm(list=ls())
library(spatstat)
library(ggplot2)
library(reshape2)
source("Dependencies/KUnivAnalysisFull.R")
source("Dependencies/KBivAnalysisFull.R")
## Filenaming
figname <- "5B"
regnames <- c("PE","PM","D1","DM","DE")
imtype  <- "MIP"
channames <- c("laminin")
for (nk in 1:length(channames)){
channameA <- channames[nk]
# KUnivAnalysisFull(figname,regnames,imtype,channameA)
rm(list=ls())
library(spatstat)
library(ggplot2)
library(reshape2)
source("Dependencies/KUnivAnalysisFull.R")
source("Dependencies/KBivAnalysisFull.R")
## Filenaming
figname <- "5B"
regnames <- c("PE","PM","D1","DM","DE")
imtype  <- "MIP"
channames <- c("laminin")
for (nk in 1:length(channames)){
channameA <- channames[nk]
# KUnivAnalysisFull(figname,regnames,imtype,channameA)
install.packages(c("backports", "BH", "broom", "callr", "colorspace", "cowplot", "data.table", "deldir", "digest", "dplyr", "evaluate", "ggplot2", "ggpubr", "ggsignif", "git2r", "glue", "httpuv", "knitr", "later", "lazyeval", "openssl", "pillar", "polyclip", "processx", "purrr", "R.utils", "R6", "Rcpp", "RcppArmadillo", "readxl", "rgl", "rlang", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "xfun"))
source('C:/Users/PC/Box Sync/Research/Projects/Bone Marrow Map/code/VisExamplePlots.R', echo=TRUE)
rep(3,4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(pdat)
source('C:/Users/PC/Box Sync/Research/Projects/MK Classification PCA/PCA/NewPCA.R', echo=TRUE)
source('C:/Users/PC/Box Sync/Research/Projects/MK Classification PCA/PCA/NewPCA.R', echo=TRUE)
setwd("F:/RSRK/RSRK/data/Timing")
library('tidyverse')
install.packages('tidyverse')
library(readxl)
tdat <- read_excel('TimingData.xlsx')
2/0.01
-1
library(readxl)
tdat <- read_excel('TimingData.xlsx')
tdat$nreps <- (1/tdat$siglvl -1)
library(readxl)
tdat <- read_excel('TimingData.xlsx')
tdat$nreps <- (1/tdat$siglvl -1)
fit <- lm(runtime ~ npts+kframes+rezx+nr+nreps)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
library(readxl)
tdat <- read_excel('TimingData.xlsx')
tdat$nreps <- (1/tdat$siglvl -1)
fit <- lm(runtime ~ npts+kframes+rezx+nr+nreps,data=tdat)
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
2/(199+1)
?predict.lm
predict.lm(fit,tdat)
tdat$pdat <- predict.lm(fit,tdat)
View(tdat)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
View(tdat)
ppframe
tdat$ppframe
tfit <- lm(runtime ~ ppframe*nreps)
tfit <- lm(runtime ~ ppframe*nreps,dat=tdat)
tfit
summary(tfit)
tfit
tfit <- lm(runtime ~ ppframe*nreps*nr,dat=tdat)
summary(lm(runtime ~ ppframe*nreps*nr,dat=tdat))
summary(glm(runtime ~ ppframe*nreps*nr,dat=tdat))
summary(lm(runtime ~ ppframe*nreps*nr,dat=tdat))
summary(lm(runtime ~ ppframe^2,dat=tdat))
summary(glm(runtime ~ ppframe^2,dat=tdat))
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
?ggplot
library(ggplot2)
?ggplot
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
g1 <- ggplot(tdat,aes(x=ppframe,y=runtime,color=siglvls))+geom_point()
print(g1)
g1 <- ggplot(tdat,aes(x=ppframe,y=runtime,color=siglvl))+geom_point()
print(g1)
g1 <- ggplot(tdat,aes(x=ppframe,y=runtime,color=nr))+geom_point()
print(g1)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
tdat$nreps
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
summary(fit)
source('F:/RSRK/RSRK/data/Timing/RSRK_TimingAnalysis.R', echo=TRUE)
View(tdat)
